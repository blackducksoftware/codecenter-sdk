apply plugin: 'java'

println "CodeCenter Version: $codeCenterVersion"
version = codeCenterVersion

ext.uploadDefs = new File("${rootDir}/uploadArtifacts.gradle")

subprojects {
    apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	
	group = 'com.blackducksoftware.codecenter.sdkclient'
	version = codeCenterVersion

	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	task listSpecificDependency(type: DependencyInsightReportTask) << {}
	
	gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
	
	ext.wsdlUriVersion = codeCenterWsdlVersion
	
	apply from: "$projectDir/../dependencies/core.gradle"
	
	configurations.all{
		resolutionStrategy{
			force "xml-resolver:xml-resolver:$xmlresolverVersion"
			force "org.apache.velocity:velocity:$velocityVersion"
			force "commons-collections:commons-collections:$commonsCollectionVersion"
		}
	}

	repositories {
		maven { url "http://jcenter.bintray.com" }
		maven { url "https://maven.repository.redhat.com/ga" }
	}
	
	task sourcesJar(type:Jar){
		from sourceSets.main.allSource
		classifier = 'sources'
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }
    
    jar {
    	from "${rootDir}/LICENSE.txt"
    }

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	eclipse {
		classpath {
			defaultOutputDir = file('build/classes/main')
			containers = [ "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${targetCompatibility}" ]
		}
	}

	if (uploadDefs.exists()){
		apply from: uploadDefs.canonicalPath
	}else{
		uploadArchives {
			repositories{
				mavenDeployer {
					repository(url: mavenLocal().url)
					pom.project {
						organization {
							name 'Black Duck Software'
							url 'http://www.blackducksoftware.com/'
						}
						licenses {
							license {
	 							name 'GNU Lesser General Public License v2.1 only'
	                            url 'http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html'
	                        }
	                    }
	                }
	            }
	        }
	    }
    }
}

configurations{
	distribution
}

task distributionZip(type: Zip){
	baseName = 'CodeCenter-SDK-Client-Tools'
	
	into("lib"){
		from project(':sdk-client-tools-codecenter:codecenter-sdk-examples').configurations.runtime
		from project(':sdk-client-tools-codecenter:codecenter-sdk-utilities').sourcesJar
		from project(':sdk-client-tools-codecenter:codecenter-sdk-client').sourcesJar
	}

	into("examples"){
		from project(':sdk-client-tools-codecenter:codecenter-sdk-examples').sourceSets.main.java
	}

	into("wsdl"){
		from project(':sdk-client-tools-codecenter:codecenter-sdk-client').file("src/main/config/wsdl")
		//TODO for some reason this fails to find WSDL files - using manual method for now
		//from project(':sdk-client-tools-codecenter:codecenter-sdk-client').sourceSets.main.java.srcDirs
	}
}

artifacts{
	distribution distributionZip
}

task wrapper(type: Wrapper) { gradleVersion = '2.5' }
