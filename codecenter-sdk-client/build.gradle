def wsdlSources = fileTree('src/main/config/wsdl').include('*.wsdl')
def wsdlBindings = fileTree('src/main/config').include('*bindings*')
def generatedWsdlSources = file("${buildDir}/generated-sources/wsdl")

//This project specifically includes generated code/javadoc which cannot be altered to conform to the doclint standards
if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

sourceSets {
	main { java { srcDir generatedWsdlSources } }
}

dependencies {
    // The generated code references the CXF XJC runtime for date/time mapping
    compile group: 'org.apache.cxf.xjc-utils', name: 'cxf-xjc-runtime', version: cxfXjcRuntimeVersion
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: bouncyCastle
}

// WSDL to Java ====================================================================================

configurations { wsdl2Java }

dependencies {
	wsdl2Java group: 'org.apache.cxf', name: 'cxf-tools-wsdlto-core', version: cxfVersion
	wsdl2Java group: 'org.apache.cxf', name: 'cxf-tools-wsdlto-frontend-jaxws', version: cxfVersion
    wsdl2Java group: 'org.apache.cxf', name: 'cxf-tools-wsdlto-databinding-jaxb', version: cxfVersion
}

task generateClient {
	description 'Generates Java sources from WSDL'
	inputs.files(wsdlSources.files + wsdlBindings.files)
	outputs.dir(generatedWsdlSources)
}

generateClient << {
    // Define the namespace URI and Java Package bases
	def baseUri = "urn:codecenter.blackducksoftware.com:sdk:v${project.ext.wsdlUriVersion - '-SNAPSHOT'}"
	def basePackage = 'com.blackducksoftware.sdk.codecenter'
	
	// Changing these package names will break backwards compatibility
	// Names are usually based on the WSDL name, except when they are not
	def wsdlNamespaces = [
		'externalIdApi.wsdl':               "${baseUri}:externalidApi"
	].withDefault { key -> "${baseUri}:${key - '.wsdl'}" }
	
	def packageNames = [
	    'deepLicenseDataApi.wsdl':           "${basePackage}.deeplicense",
	    'externalIdApi.wsdl':                "${basePackage}.externalid"
	].withDefault { key -> "${basePackage}.${key - 'Api.wsdl'}" }
	
	def dataWsdlNamespaces = [
		'deepLicenseDataApi.wsdl':			"${baseUri}:deeplicense.data",
		'externalIdApi.wsdl':               "${baseUri}:externalid.data"
	].withDefault { key -> "${baseUri}:${key - 'Api.wsdl'}.data" }
	
	def dataPackageNames = [
	    'deepLicenseDataApi.wsdl':           "${basePackage}.deeplicense.data",
	    'externalIdApi.wsdl':                "${basePackage}.externalid.data"
	].withDefault { key -> "${basePackage}.${key - 'Api.wsdl'}.data" }
	
	// Execute WSDL2Java on every WSDL file
	wsdlSources.each { wsdlFile ->
		project.javaexec {
			main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
			classpath = configurations.wsdl2Java
			args('-verbose', '-xjc-verbose')
			//args('-frontend', 'jaxws21')
			args('-validate=basic')
			args('-client')
			//args('-allowElementReferences')
			args(wsdlBindings.collect{['-b', it]}.flatten())
			args(wsdlSources.collect{['-p', "${wsdlNamespaces[it.name]}=${packageNames[it.name]}"]}.flatten())
			args(wsdlSources.collect{['-p', "${dataWsdlNamespaces[it.name]}=${dataPackageNames[it.name]}"]}.flatten())
			args('-p', "${baseUri}:administration.data=${basePackage}.administration.data")
			args('-p', "${baseUri}:attachmentApi=${basePackage}.attachment")
			args('-p', "${baseUri}:attachment.data=${basePackage}.attachment.data")
			args('-p', "${baseUri}:common.data=${basePackage}.common.data")
			args('-p', "${baseUri}:message=${packageNames[wsdlFile.name]}.message")
			args('-p', "${baseUri}:fault=${basePackage}.fault")
			args('-p', "${packageNames[wsdlFile.name]}")
			args('-d', generatedWsdlSources)
			args(wsdlFile)
		}
	}
}

compileJava.dependsOn generateClient
